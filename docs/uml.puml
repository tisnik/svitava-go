@startuml
namespace configuration {
    class Configuration << (S,Aquamarine) >> {
        + ServerConfiguration ServerConfiguration
        + LoggingConfiguration LoggingConfiguration
        + RenderingConfiguration RenderingConfiguration

    }
    class LoggingConfiguration << (S,Aquamarine) >> {
        + Debug bool

    }
    class RenderingConfiguration << (S,Aquamarine) >> {
        + ImageFormat string
        + BinaryPPM bool

    }
    class ServerConfiguration << (S,Aquamarine) >> {
        + Address string

    }
}


"configuration.Configuration""uses" o-- "configuration.LoggingConfiguration"
"configuration.Configuration""uses" o-- "configuration.RenderingConfiguration"
"configuration.Configuration""uses" o-- "configuration.ServerConfiguration"

namespace cplx {
    class ZPixel << (S,Aquamarine) >> {
        + Iter uint
        + Z complex128
        + Iter uint
        + Z complex128

    }
    class cplx.ZImage << (T, #FF7700) >>  {
    }
}



namespace image {
    class Resolution << (S,Aquamarine) >> {
        + Width uint
        + Height uint

    }
    interface Writer  {
        + WriteImage(filename string, img image.Image) error

    }
}



namespace palettes {
    class Palette << (S,Aquamarine) >> {
        + SaveBinaryRGBPalette(filename string) error
        + SaveBinaryRGBAPalette(filename string) error
        + SaveTextRGBPalette(filename string) error
        + SaveTextRGBAPalette(filename string) error

    }
    class palettes.Palette << (T, #FF7700) >>  {
    }
}



namespace params {
    class Cplx << (S,Aquamarine) >> {
        + Name string
        + Type string
        + Cx0 float64
        + Cy0 float64
        + Maxiter uint
        + Xmin float64
        + Ymin float64
        + Xmax float64
        + Ymax float64

    }
    class CplxParams << (S,Aquamarine) >> {
        + Parameters []Cplx

    }
}


"params.CplxParams""uses" o-- "params.Cplx"

namespace renderer {
    interface Renderer  {
        + RenderComplexFractal(resolution image.Resolution, params params.Cplx, palette palettes.Palette) image.Image

    }
    class SingleGoroutineRenderer << (S,Aquamarine) >> {
        + RenderComplexFractal(resolution image.Resolution, params params.Cplx, palette palettes.Palette) image.Image

    }
    class renderer.fractalFunction << (T, #FF7700) >>  {
    }
    class renderer.fractalFunction2 << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(uint, uint, float64, float64, uint, cplx.ZImage) " as fontcolorbluefuncfontuintuintfloat64float64uintcplxZImage {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
    class "<font color=blue>func</font>(uint, uint, params.Cplx, cplx.ZImage) " as fontcolorbluefuncfontuintuintparamsCplxcplxZImage {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"renderer.Renderer" <|-- "implements""renderer.SingleGoroutineRenderer"


namespace server {
    class HTTPServer << (S,Aquamarine) >> {
        - port uint

        - indexPageHandler(w http.ResponseWriter, r *http.Request) 
        - newFractalPageHandler(w http.ResponseWriter, r *http.Request) 
        - galleryPageHandler(w http.ResponseWriter, r *http.Request) 
        - settingsPageHandler(w http.ResponseWriter, r *http.Request) 
        - staticImageHandler(w http.ResponseWriter, r *http.Request) 

        + Serve() 

    }
    interface Server  {
        + Serve() 

    }
}

"server.Server" <|-- "implements""server.HTTPServer"


"__builtin__.[][]byte" #.. "alias of""palettes.Palette"
"cplx.[][]ZPixel" #.. "alias of""cplx.ZImage"
"renderer.fontcolorbluefuncfontuintuintfloat64float64uintcplxZImage" #.. "alias of""renderer.fractalFunction"
"renderer.fontcolorbluefuncfontuintuintparamsCplxcplxZImage" #.. "alias of""renderer.fractalFunction2"
@enduml
