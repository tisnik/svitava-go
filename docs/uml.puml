@startuml
namespace configuration {
    class Configuration << (S,Aquamarine) >> {
        + ServerConfiguration ServerConfiguration
        + LoggingConfiguration LoggingConfiguration
        + RenderingConfiguration RenderingConfiguration

    }
    class LoggingConfiguration << (S,Aquamarine) >> {
        + Debug bool

    }
    class RenderingConfiguration << (S,Aquamarine) >> {
        + ImageFormat string
        + BinaryPPM bool

    }
    class ServerConfiguration << (S,Aquamarine) >> {
        + Address string

    }
}


"configuration.Configuration""uses" o-- "configuration.LoggingConfiguration"
"configuration.Configuration""uses" o-- "configuration.RenderingConfiguration"
"configuration.Configuration""uses" o-- "configuration.ServerConfiguration"

namespace cplx {
    class ZPixel << (S,Aquamarine) >> {
        + Iter uint
        + Z complex128

    }
    class cplx.ZImage << (T, #FF7700) >>  {
    }
}



namespace deepimage {
    class Image << (S,Aquamarine) >> {
        + Resolution Resolution
        + Z ZImage
        + R RImage
        + I IImage
        + RGBA *image.NRGBA

        + ApplyPalette(palette palettes.Palette) 

    }
    class Resolution << (S,Aquamarine) >> {
        + Width uint
        + Height uint

    }
    class deepimage.IImage << (T, #FF7700) >>  {
    }
    class deepimage.IPixel << (T, #FF7700) >>  {
    }
    class deepimage.RImage << (T, #FF7700) >>  {
    }
    class deepimage.RPixel << (T, #FF7700) >>  {
    }
    class deepimage.ZImage << (T, #FF7700) >>  {
    }
    class deepimage.ZPixel << (T, #FF7700) >>  {
    }
}


"deepimage.Image""uses" o-- "deepimage.IImage"
"deepimage.Image""uses" o-- "deepimage.RImage"
"deepimage.Image""uses" o-- "deepimage.Resolution"
"deepimage.Image""uses" o-- "deepimage.ZImage"
"deepimage.Image""uses" o-- "image.NRGBA"

namespace image {
    class BMPImageWriter << (S,Aquamarine) >> {
        + WriteImage(filename string, img image.Image) error

    }
    class GIFImageWriter << (S,Aquamarine) >> {
        + WriteImage(filename string, img image.Image) error

    }
    class JPEGImageWriter << (S,Aquamarine) >> {
        + WriteImage(filename string, img image.Image) error

    }
    class PNGImageWriter << (S,Aquamarine) >> {
        + WriteImage(filename string, img image.Image) error

    }
    class PPMImageWriter << (S,Aquamarine) >> {
        + WriteImage(filename string, img image.Image) error

    }
    interface Reader  {
        + ReadImage(filename string) (image.Image, error)

    }
    class Resolution << (S,Aquamarine) >> {
        + Width uint
        + Height uint

    }
    class TGAImageWriter << (S,Aquamarine) >> {
        + WriteImage(filename string, img image.Image) error

    }
    interface Writer  {
        + WriteImage(filename string, img image.Image) error

    }
}

"image.Writer" <|-- "implements""image.BMPImageWriter"
"image.Writer" <|-- "implements""image.GIFImageWriter"
"image.Writer" <|-- "implements""image.JPEGImageWriter"
"image.Writer" <|-- "implements""image.PNGImageWriter"
"image.Writer" <|-- "implements""image.PPMImageWriter"
"image.Writer" <|-- "implements""image.TGAImageWriter"


namespace palettes {
    class Palette << (S,Aquamarine) >> {
        + SaveBinaryRGBPalette(filename string) error
        + SaveBinaryRGBAPalette(filename string) error
        + SaveTextRGBPalette(filename string) error
        + SaveTextRGBAPalette(filename string) error

    }
    class palettes.Palette << (T, #FF7700) >>  {
    }
}



namespace params {
    class Cplx << (S,Aquamarine) >> {
        + Name string
        + Type string
        + Cx0 float64
        + Cy0 float64
        + Maxiter uint
        + Bailout uint
        + Function1 string
        + Function2 string
        + Xmin float64
        + Ymin float64
        + Xmax float64
        + Ymax float64

    }
    class CplxParams << (S,Aquamarine) >> {
        + Parameters []Cplx

    }
}


"params.CplxParams""uses" o-- "params.Cplx"

namespace renderer {
    interface Renderer  {
        + RenderComplexFractal(resolution image.Resolution, params params.Cplx, palette palettes.Palette) image.Image

    }
    class SingleGoroutineRenderer << (S,Aquamarine) >> {
        + RenderComplexFractal(resolution image.Resolution, params params.Cplx, palette palettes.Palette) image.Image

    }
    class renderer.fractalFunction << (T, #FF7700) >>  {
    }
    class "<font color=blue>func</font>(params.Cplx, deepimage.Image) " as fontcolorbluefuncfontparamsCplxdeepimageImage {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}

"renderer.Renderer" <|-- "implements""renderer.SingleGoroutineRenderer"


namespace server {
    class HTTPServer << (S,Aquamarine) >> {
        - port uint
        - renderer renderer.Renderer

        - indexPageHandler(w http.ResponseWriter, r *http.Request) 
        - newFractalPageHandler(w http.ResponseWriter, r *http.Request) 
        - galleryPageHandler(w http.ResponseWriter, r *http.Request) 
        - settingsPageHandler(w http.ResponseWriter, r *http.Request) 
        - staticImageHandler(w http.ResponseWriter, r *http.Request) 
        - staticIconHandler(w http.ResponseWriter, r *http.Request) 
        - styleSheetHandler(w http.ResponseWriter, r *http.Request) 
        - fractalTypeImageHandler(w http.ResponseWriter, r *http.Request) 

        + Serve() 

    }
    interface Server  {
        + Serve() 

    }
}

"server.Server" <|-- "implements""server.HTTPServer"


"__builtin__.[][]byte" #.. "alias of""palettes.Palette"
"__builtin__.complex128" #.. "alias of""deepimage.ZPixel"
"__builtin__.float64" #.. "alias of""deepimage.RPixel"
"__builtin__.uint64" #.. "alias of""deepimage.IPixel"
"cplx.[][]ZPixel" #.. "alias of""cplx.ZImage"
"deepimage.[][]IPixel" #.. "alias of""deepimage.IImage"
"deepimage.[][]RPixel" #.. "alias of""deepimage.RImage"
"deepimage.[][]ZPixel" #.. "alias of""deepimage.ZImage"
"renderer.fontcolorbluefuncfontparamsCplxdeepimageImage" #.. "alias of""renderer.fractalFunction"
@enduml
